{"version":3,"sources":["../src/core.ts"],"sourcesContent":["import { TimeSpan, createDate, isWithinExpirationDate } from \"oslo\";\nimport { generateId } from \"./crypto.js\";\nimport { CookieController } from \"oslo/cookie\";\n\nimport type { Cookie } from \"oslo/cookie\";\nimport type { Adapter } from \"./database.js\";\nimport type {\n\tRegisteredDatabaseSessionAttributes,\n\tRegisteredDatabaseUserAttributes,\n\tRegisteredLucia\n} from \"./index.js\";\nimport { CookieAttributes } from \"oslo/cookie\";\n\ntype SessionAttributes = RegisteredLucia extends Lucia<infer _SessionAttributes, any>\n\t? _SessionAttributes\n\t: {};\n\ntype UserAttributes = RegisteredLucia extends Lucia<any, infer _UserAttributes>\n\t? _UserAttributes\n\t: {};\n\nexport interface Session extends SessionAttributes {\n\tid: string;\n\texpiresAt: Date;\n\tfresh: boolean;\n\tuserId: string;\n}\n\nexport interface User extends UserAttributes {\n\tid: string;\n}\n\nexport class Lucia<\n\t_SessionAttributes extends {} = Record<never, never>,\n\t_UserAttributes extends {} = Record<never, never>\n> {\n\tprivate adapter: Adapter;\n\tprivate sessionExpiresIn: TimeSpan;\n\tprivate sessionCookieController: CookieController;\n\n\tprivate getSessionAttributes: (\n\t\tdatabaseSessionAttributes: RegisteredDatabaseSessionAttributes\n\t) => _SessionAttributes;\n\n\tprivate getUserAttributes: (\n\t\tdatabaseUserAttributes: RegisteredDatabaseUserAttributes\n\t) => _UserAttributes;\n\n\tpublic readonly sessionCookieName: string;\n\n\tconstructor(\n\t\tadapter: Adapter,\n\t\toptions?: {\n\t\t\tsessionExpiresIn?: TimeSpan;\n\t\t\tsessionCookie?: SessionCookieOptions;\n\t\t\tgetSessionAttributes?: (\n\t\t\t\tdatabaseSessionAttributes: RegisteredDatabaseSessionAttributes\n\t\t\t) => _SessionAttributes;\n\t\t\tgetUserAttributes?: (\n\t\t\t\tdatabaseUserAttributes: RegisteredDatabaseUserAttributes\n\t\t\t) => _UserAttributes;\n\t\t}\n\t) {\n\t\tthis.adapter = adapter;\n\n\t\t// we have to use `any` here since TS can't do conditional return types\n\t\tthis.getUserAttributes = (databaseUserAttributes): any => {\n\t\t\tif (options && options.getUserAttributes) {\n\t\t\t\treturn options.getUserAttributes(databaseUserAttributes);\n\t\t\t}\n\t\t\treturn {};\n\t\t};\n\t\tthis.getSessionAttributes = (databaseSessionAttributes): any => {\n\t\t\tif (options && options.getSessionAttributes) {\n\t\t\t\treturn options.getSessionAttributes(databaseSessionAttributes);\n\t\t\t}\n\t\t\treturn {};\n\t\t};\n\t\tthis.sessionExpiresIn = options?.sessionExpiresIn ?? new TimeSpan(30, \"d\");\n\t\tthis.sessionCookieName = options?.sessionCookie?.name ?? \"auth_session\";\n\t\tlet sessionCookieExpiresIn = this.sessionExpiresIn;\n\t\tif (options?.sessionCookie?.expires === false) {\n\t\t\tsessionCookieExpiresIn = new TimeSpan(365 * 2, \"d\");\n\t\t}\n\t\tconst baseSessionCookieAttributes: CookieAttributes = {\n\t\t\thttpOnly: true,\n\t\t\tsecure: true,\n\t\t\tsameSite: \"lax\",\n\t\t\tpath: \"/\",\n\t\t\t...options?.sessionCookie?.attributes\n\t\t};\n\t\tthis.sessionCookieController = new CookieController(\n\t\t\tthis.sessionCookieName,\n\t\t\tbaseSessionCookieAttributes,\n\t\t\t{\n\t\t\t\texpiresIn: sessionCookieExpiresIn\n\t\t\t}\n\t\t);\n\t}\n\n\tpublic async getUserSessions(userId: string): Promise<Session[]> {\n\t\tconst databaseSessions = await this.adapter.getUserSessions(userId);\n\t\tconst sessions: Session[] = [];\n\t\tfor (const databaseSession of databaseSessions) {\n\t\t\tif (!isWithinExpirationDate(databaseSession.expiresAt)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tsessions.push({\n\t\t\t\tid: databaseSession.id,\n\t\t\t\texpiresAt: databaseSession.expiresAt,\n\t\t\t\tuserId: databaseSession.userId,\n\t\t\t\tfresh: false,\n\t\t\t\t...this.getSessionAttributes(databaseSession.attributes)\n\t\t\t});\n\t\t}\n\t\treturn sessions;\n\t}\n\n\tpublic async validateSession(\n\t\tsessionId: string\n\t): Promise<{ user: User; session: Session } | { user: null; session: null }> {\n\t\tconst [databaseSession, databaseUser] = await this.adapter.getSessionAndUser(sessionId);\n\t\tif (!databaseSession) {\n\t\t\treturn { session: null, user: null };\n\t\t}\n\t\tif (!databaseUser) {\n\t\t\tawait this.adapter.deleteSession(databaseSession.id);\n\t\t\treturn { session: null, user: null };\n\t\t}\n\t\tif (!isWithinExpirationDate(databaseSession.expiresAt)) {\n\t\t\tawait this.adapter.deleteSession(databaseSession.id);\n\t\t\treturn { session: null, user: null };\n\t\t}\n\t\tconst activePeriodExpirationDate = new Date(\n\t\t\tdatabaseSession.expiresAt.getTime() - this.sessionExpiresIn.milliseconds() / 2\n\t\t);\n\t\tconst session: Session = {\n\t\t\t...this.getSessionAttributes(databaseSession.attributes),\n\t\t\tid: databaseSession.id,\n\t\t\tuserId: databaseSession.userId,\n\t\t\tfresh: false,\n\t\t\texpiresAt: databaseSession.expiresAt\n\t\t};\n\t\tif (!isWithinExpirationDate(activePeriodExpirationDate)) {\n\t\t\tsession.fresh = true;\n\t\t\tsession.expiresAt = createDate(this.sessionExpiresIn);\n\t\t\tawait this.adapter.updateSessionExpiration(databaseSession.id, session.expiresAt);\n\t\t}\n\t\tconst user: User = {\n\t\t\t...this.getUserAttributes(databaseUser.attributes),\n\t\t\tid: databaseUser.id\n\t\t};\n\t\treturn { user, session };\n\t}\n\n\tpublic async createSession(\n\t\tuserId: string,\n\t\tattributes: RegisteredDatabaseSessionAttributes,\n\t\toptions?: {\n\t\t\tsessionId?: string;\n\t\t}\n\t): Promise<Session> {\n\t\tconst sessionId = options?.sessionId ?? generateId(40);\n\t\tconst sessionExpiresAt = createDate(this.sessionExpiresIn);\n\t\tawait this.adapter.setSession({\n\t\t\tid: sessionId,\n\t\t\tuserId,\n\t\t\texpiresAt: sessionExpiresAt,\n\t\t\tattributes\n\t\t});\n\t\tconst session: Session = {\n\t\t\tid: sessionId,\n\t\t\tuserId,\n\t\t\tfresh: true,\n\t\t\texpiresAt: sessionExpiresAt,\n\t\t\t...this.getSessionAttributes(attributes)\n\t\t};\n\t\treturn session;\n\t}\n\n\tpublic async invalidateSession(sessionId: string): Promise<void> {\n\t\tawait this.adapter.deleteSession(sessionId);\n\t}\n\n\tpublic async invalidateUserSessions(userId: string): Promise<void> {\n\t\tawait this.adapter.deleteUserSessions(userId);\n\t}\n\n\tpublic async deleteExpiredSessions(): Promise<void> {\n\t\tawait this.adapter.deleteExpiredSessions();\n\t}\n\n\tpublic readSessionCookie(cookieHeader: string): string | null {\n\t\tconst sessionId = this.sessionCookieController.parse(cookieHeader);\n\t\treturn sessionId;\n\t}\n\n\tpublic readBearerToken(authorizationHeader: string): string | null {\n\t\tconst [authScheme, token] = authorizationHeader.split(\" \") as [string, string | undefined];\n\t\tif (authScheme !== \"Bearer\") {\n\t\t\treturn null;\n\t\t}\n\t\treturn token ?? null;\n\t}\n\n\tpublic createSessionCookie(sessionId: string): Cookie {\n\t\treturn this.sessionCookieController.createCookie(sessionId);\n\t}\n\n\tpublic createBlankSessionCookie(): Cookie {\n\t\treturn this.sessionCookieController.createBlankCookie();\n\t}\n}\n\nexport interface SessionCookieOptions {\n\tname?: string;\n\texpires?: boolean;\n\tattributes?: SessionCookieAttributesOptions;\n}\n\nexport interface SessionCookieAttributesOptions {\n\tsameSite?: \"lax\" | \"strict\";\n\tdomain?: string;\n\tpath?: string;\n\tsecure?: boolean;\n}\n"],"mappings":"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","names":[]}