{"version":3,"sources":["../src/crypto.test.ts"],"sourcesContent":["import { test, expect } from \"vitest\";\nimport { Scrypt, LegacyScrypt } from \"./crypto.js\";\nimport { encodeHex } from \"oslo/encoding\";\n\ntest(\"validateScryptHash() validates hashes generated with generateScryptHash()\", async () => {\n\tconst password = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tconst scrypt = new Scrypt();\n\tconst hash = await scrypt.hash(password);\n\tawait expect(scrypt.verify(hash, password)).resolves.toBe(true);\n\tconst falsePassword = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tawait expect(scrypt.verify(hash, falsePassword)).resolves.toBe(false);\n});\n\ntest(\"LegacyScrypt\", async () => {\n\tconst password = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tconst scrypt = new LegacyScrypt();\n\tconst hash = await scrypt.hash(password);\n\tawait expect(scrypt.verify(hash, password)).resolves.toBe(true);\n\tconst falsePassword = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tawait expect(scrypt.verify(hash, falsePassword)).resolves.toBe(false);\n});\n"],"mappings":"AAAA,SAAS,MAAM,cAAc;AAC7B,SAAS,QAAQ,oBAAoB;AACrC,SAAS,iBAAiB;AAE1B,KAAK,6EAA6E,YAAY;AAC7F,QAAM,WAAW,UAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACrE,QAAM,SAAS,IAAI,OAAO;AAC1B,QAAM,OAAO,MAAM,OAAO,KAAK,QAAQ;AACvC,QAAM,OAAO,OAAO,OAAO,MAAM,QAAQ,CAAC,EAAE,SAAS,KAAK,IAAI;AAC9D,QAAM,gBAAgB,UAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AAC1E,QAAM,OAAO,OAAO,OAAO,MAAM,aAAa,CAAC,EAAE,SAAS,KAAK,KAAK;AACrE,CAAC;AAED,KAAK,gBAAgB,YAAY;AAChC,QAAM,WAAW,UAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACrE,QAAM,SAAS,IAAI,aAAa;AAChC,QAAM,OAAO,MAAM,OAAO,KAAK,QAAQ;AACvC,QAAM,OAAO,OAAO,OAAO,MAAM,QAAQ,CAAC,EAAE,SAAS,KAAK,IAAI;AAC9D,QAAM,gBAAgB,UAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AAC1E,QAAM,OAAO,OAAO,OAAO,MAAM,aAAa,CAAC,EAAE,SAAS,KAAK,KAAK;AACrE,CAAC;","names":[]}