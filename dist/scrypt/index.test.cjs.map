{"version":3,"sources":["../../src/scrypt/index.test.ts"],"sourcesContent":["import { expect, test } from \"vitest\";\nimport { scrypt } from \"./index.js\";\nimport { scryptSync as nodeScrypt } from \"node:crypto\";\nimport { generateRandomString, alphabet } from \"oslo/crypto\";\nimport { encodeHex } from \"oslo/encoding\";\n\ntest(\"scrypt() output matches crypto\", async () => {\n\tconst password = generateRandomString(16, alphabet(\"a-z\", \"A-Z\", \"0-9\"));\n\tconst salt = encodeHex(crypto.getRandomValues(new Uint8Array(16)));\n\tconst scryptHash = await scrypt(\n\t\tnew TextEncoder().encode(password),\n\t\tnew TextEncoder().encode(salt),\n\t\t{\n\t\t\tN: 16384,\n\t\t\tr: 16,\n\t\t\tp: 1,\n\t\t\tdkLen: 64\n\t\t}\n\t);\n\tconst cryptoHash = new Uint8Array(\n\t\tnodeScrypt(password, salt, 64, {\n\t\t\tN: 16384,\n\t\t\tp: 1,\n\t\t\tr: 16,\n\t\t\tmaxmem: 128 * 16384 * 16 * 2\n\t\t}).buffer\n\t);\n\texpect(cryptoHash).toStrictEqual(scryptHash);\n});\n"],"mappings":";AAAA,oBAA6B;AAC7B,mBAAuB;AACvB,yBAAyC;AACzC,oBAA+C;AAC/C,sBAA0B;AAAA,IAE1B,oBAAK,kCAAkC,YAAY;AAClD,QAAM,eAAW,oCAAqB,QAAI,wBAAS,OAAO,OAAO,KAAK,CAAC;AACvE,QAAM,WAAO,2BAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACjE,QAAM,aAAa,UAAM;AAAA,IACxB,IAAI,YAAY,EAAE,OAAO,QAAQ;AAAA,IACjC,IAAI,YAAY,EAAE,OAAO,IAAI;AAAA,IAC7B;AAAA,MACC,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,OAAO;AAAA,IACR;AAAA,EACD;AACA,QAAM,aAAa,IAAI;AAAA,QACtB,mBAAAA,YAAW,UAAU,MAAM,IAAI;AAAA,MAC9B,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,QAAQ,MAAM,QAAQ,KAAK;AAAA,IAC5B,CAAC,EAAE;AAAA,EACJ;AACA,4BAAO,UAAU,EAAE,cAAc,UAAU;AAC5C,CAAC;","names":["nodeScrypt"]}