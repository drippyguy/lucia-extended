{"version":3,"sources":["../../src/scrypt/index.ts"],"sourcesContent":["/*\nThe MIT License (MIT)\n\nCopyright (c) 2022 Paul Miller (https://paulmillr.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the “Software”), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. \n*/\n\nexport async function scrypt(\n\tpassword: Uint8Array,\n\tsalt: Uint8Array,\n\toptions: {\n\t\tN: number;\n\t\tr: number;\n\t\tp: number;\n\t\tdkLen?: number;\n\t\tmaxmem?: number;\n\t}\n): Promise<Uint8Array> {\n\tconst { N, r, p } = options;\n\tconst dkLen = options.dkLen ?? 32;\n\tconst maxmem = 1024 ** 3 + 1024;\n\tconst blockSize = 128 * r;\n\tconst blockSize32 = blockSize / 4;\n\tif (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n\t\tthrow new Error(\n\t\t\t\"Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32\"\n\t\t);\n\t}\n\tif (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n\t\tthrow new Error(\n\t\t\t\"Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)\"\n\t\t);\n\t}\n\tif (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n\t\tthrow new Error(\n\t\t\t\"Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32\"\n\t\t);\n\t}\n\tconst memUsed = blockSize * (N + p);\n\tif (memUsed > maxmem) {\n\t\tthrow new Error(\n\t\t\t`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`\n\t\t);\n\t}\n\tconst B = await pbkdf2(password, salt, { c: 1, dkLen: blockSize * p });\n\tconst B32 = u32(B);\n\tconst V = u32(new Uint8Array(blockSize * N));\n\tconst tmp = u32(new Uint8Array(blockSize));\n\tfor (let pi = 0; pi < p; pi++) {\n\t\tconst Pi = blockSize32 * pi;\n\t\tfor (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n\t\tfor (let i = 0, pos = 0; i < N - 1; i++) {\n\t\t\tBlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n\t\t\tawait new Promise<void>((r) => r()); // await next tick\n\t\t}\n\t\tBlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n\t\tfor (let i = 0; i < N; i++) {\n\t\t\t// First u32 of the last 64-byte block (u32 is LE)\n\t\t\tconst j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n\t\t\tfor (let k = 0; k < blockSize32; k++) {\n\t\t\t\ttmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n\t\t\t}\n\n\t\t\tBlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n\t\t\tawait new Promise<void>((r) => r()); // await next tick\n\t\t}\n\t}\n\tconst res = await pbkdf2(password, B, { c: 1, dkLen });\n\tB.fill(0);\n\tV.fill(0);\n\ttmp.fill(0);\n\treturn res;\n}\n\nfunction rotl(a: number, b: number): number {\n\treturn (a << b) | (a >>> (32 - b));\n}\n\nfunction XorAndSalsa(\n\tprev: Uint32Array,\n\tpi: number,\n\tinput: Uint32Array,\n\tii: number,\n\tout: Uint32Array,\n\toi: number\n): void {\n\tconst y00 = prev[pi++] ^ input[ii++],\n\t\ty01 = prev[pi++] ^ input[ii++];\n\tconst y02 = prev[pi++] ^ input[ii++],\n\t\ty03 = prev[pi++] ^ input[ii++];\n\tconst y04 = prev[pi++] ^ input[ii++],\n\t\ty05 = prev[pi++] ^ input[ii++];\n\tconst y06 = prev[pi++] ^ input[ii++],\n\t\ty07 = prev[pi++] ^ input[ii++];\n\tconst y08 = prev[pi++] ^ input[ii++],\n\t\ty09 = prev[pi++] ^ input[ii++];\n\tconst y10 = prev[pi++] ^ input[ii++],\n\t\ty11 = prev[pi++] ^ input[ii++];\n\tconst y12 = prev[pi++] ^ input[ii++],\n\t\ty13 = prev[pi++] ^ input[ii++];\n\tconst y14 = prev[pi++] ^ input[ii++],\n\t\ty15 = prev[pi++] ^ input[ii++];\n\tlet x00 = y00,\n\t\tx01 = y01,\n\t\tx02 = y02,\n\t\tx03 = y03,\n\t\tx04 = y04,\n\t\tx05 = y05,\n\t\tx06 = y06,\n\t\tx07 = y07,\n\t\tx08 = y08,\n\t\tx09 = y09,\n\t\tx10 = y10,\n\t\tx11 = y11,\n\t\tx12 = y12,\n\t\tx13 = y13,\n\t\tx14 = y14,\n\t\tx15 = y15;\n\tfor (let i = 0; i < 8; i += 2) {\n\t\tx04 ^= rotl((x00 + x12) | 0, 7);\n\t\tx08 ^= rotl((x04 + x00) | 0, 9);\n\t\tx12 ^= rotl((x08 + x04) | 0, 13);\n\t\tx00 ^= rotl((x12 + x08) | 0, 18);\n\t\tx09 ^= rotl((x05 + x01) | 0, 7);\n\t\tx13 ^= rotl((x09 + x05) | 0, 9);\n\t\tx01 ^= rotl((x13 + x09) | 0, 13);\n\t\tx05 ^= rotl((x01 + x13) | 0, 18);\n\t\tx14 ^= rotl((x10 + x06) | 0, 7);\n\t\tx02 ^= rotl((x14 + x10) | 0, 9);\n\t\tx06 ^= rotl((x02 + x14) | 0, 13);\n\t\tx10 ^= rotl((x06 + x02) | 0, 18);\n\t\tx03 ^= rotl((x15 + x11) | 0, 7);\n\t\tx07 ^= rotl((x03 + x15) | 0, 9);\n\t\tx11 ^= rotl((x07 + x03) | 0, 13);\n\t\tx15 ^= rotl((x11 + x07) | 0, 18);\n\t\tx01 ^= rotl((x00 + x03) | 0, 7);\n\t\tx02 ^= rotl((x01 + x00) | 0, 9);\n\t\tx03 ^= rotl((x02 + x01) | 0, 13);\n\t\tx00 ^= rotl((x03 + x02) | 0, 18);\n\t\tx06 ^= rotl((x05 + x04) | 0, 7);\n\t\tx07 ^= rotl((x06 + x05) | 0, 9);\n\t\tx04 ^= rotl((x07 + x06) | 0, 13);\n\t\tx05 ^= rotl((x04 + x07) | 0, 18);\n\t\tx11 ^= rotl((x10 + x09) | 0, 7);\n\t\tx08 ^= rotl((x11 + x10) | 0, 9);\n\t\tx09 ^= rotl((x08 + x11) | 0, 13);\n\t\tx10 ^= rotl((x09 + x08) | 0, 18);\n\t\tx12 ^= rotl((x15 + x14) | 0, 7);\n\t\tx13 ^= rotl((x12 + x15) | 0, 9);\n\t\tx14 ^= rotl((x13 + x12) | 0, 13);\n\t\tx15 ^= rotl((x14 + x13) | 0, 18);\n\t}\n\tout[oi++] = (y00 + x00) | 0;\n\tout[oi++] = (y01 + x01) | 0;\n\tout[oi++] = (y02 + x02) | 0;\n\tout[oi++] = (y03 + x03) | 0;\n\tout[oi++] = (y04 + x04) | 0;\n\tout[oi++] = (y05 + x05) | 0;\n\tout[oi++] = (y06 + x06) | 0;\n\tout[oi++] = (y07 + x07) | 0;\n\tout[oi++] = (y08 + x08) | 0;\n\tout[oi++] = (y09 + x09) | 0;\n\tout[oi++] = (y10 + x10) | 0;\n\tout[oi++] = (y11 + x11) | 0;\n\tout[oi++] = (y12 + x12) | 0;\n\tout[oi++] = (y13 + x13) | 0;\n\tout[oi++] = (y14 + x14) | 0;\n\tout[oi++] = (y15 + x15) | 0;\n}\n\nasync function pbkdf2(\n\tpassword: Uint8Array,\n\tsalt: Uint8Array,\n\toptions: {\n\t\tc: number;\n\t\tdkLen: number;\n\t}\n): Promise<Uint8Array> {\n\tconst pwKey = await crypto.subtle.importKey(\"raw\", password, \"PBKDF2\", false, [\"deriveBits\"]);\n\tconst keyBuffer = await crypto.subtle.deriveBits(\n\t\t{\n\t\t\tname: \"PBKDF2\",\n\t\t\thash: \"SHA-256\",\n\t\t\tsalt,\n\t\t\titerations: options.c\n\t\t},\n\t\tpwKey,\n\t\toptions.dkLen * 8\n\t);\n\treturn new Uint8Array(keyBuffer);\n}\n\nfunction BlockMix(input: Uint32Array, ii: number, out: Uint32Array, oi: number, r: number): void {\n\tlet head = oi + 0;\n\tlet tail = oi + 16 * r;\n\tfor (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i];\n\tfor (let i = 0; i < r; i++, head += 16, ii += 16) {\n\t\tXorAndSalsa(out, tail, input, ii, out, head);\n\t\tif (i > 0) tail += 16;\n\t\tXorAndSalsa(out, head, input, (ii += 16), out, tail);\n\t}\n}\n\nfunction u32(arr: Uint8Array): Uint32Array {\n\treturn new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n"],"mappings":"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","names":["r"]}