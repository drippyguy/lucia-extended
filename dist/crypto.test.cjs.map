{"version":3,"sources":["../src/crypto.test.ts"],"sourcesContent":["import { test, expect } from \"vitest\";\nimport { Scrypt, LegacyScrypt } from \"./crypto.js\";\nimport { encodeHex } from \"oslo/encoding\";\n\ntest(\"validateScryptHash() validates hashes generated with generateScryptHash()\", async () => {\n\tconst password = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tconst scrypt = new Scrypt();\n\tconst hash = await scrypt.hash(password);\n\tawait expect(scrypt.verify(hash, password)).resolves.toBe(true);\n\tconst falsePassword = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tawait expect(scrypt.verify(hash, falsePassword)).resolves.toBe(false);\n});\n\ntest(\"LegacyScrypt\", async () => {\n\tconst password = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tconst scrypt = new LegacyScrypt();\n\tconst hash = await scrypt.hash(password);\n\tawait expect(scrypt.verify(hash, password)).resolves.toBe(true);\n\tconst falsePassword = encodeHex(crypto.getRandomValues(new Uint8Array(32)));\n\tawait expect(scrypt.verify(hash, falsePassword)).resolves.toBe(false);\n});\n"],"mappings":";AAAA,oBAA6B;AAC7B,oBAAqC;AACrC,sBAA0B;AAAA,IAE1B,oBAAK,6EAA6E,YAAY;AAC7F,QAAM,eAAW,2BAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACrE,QAAM,SAAS,IAAI,qBAAO;AAC1B,QAAM,OAAO,MAAM,OAAO,KAAK,QAAQ;AACvC,YAAM,sBAAO,OAAO,OAAO,MAAM,QAAQ,CAAC,EAAE,SAAS,KAAK,IAAI;AAC9D,QAAM,oBAAgB,2BAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AAC1E,YAAM,sBAAO,OAAO,OAAO,MAAM,aAAa,CAAC,EAAE,SAAS,KAAK,KAAK;AACrE,CAAC;AAAA,IAED,oBAAK,gBAAgB,YAAY;AAChC,QAAM,eAAW,2BAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AACrE,QAAM,SAAS,IAAI,2BAAa;AAChC,QAAM,OAAO,MAAM,OAAO,KAAK,QAAQ;AACvC,YAAM,sBAAO,OAAO,OAAO,MAAM,QAAQ,CAAC,EAAE,SAAS,KAAK,IAAI;AAC9D,QAAM,oBAAgB,2BAAU,OAAO,gBAAgB,IAAI,WAAW,EAAE,CAAC,CAAC;AAC1E,YAAM,sBAAO,OAAO,OAAO,MAAM,aAAa,CAAC,EAAE,SAAS,KAAK,KAAK;AACrE,CAAC;","names":[]}